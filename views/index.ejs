<!DOCTYPE html>
<html lang="en">
<%- include("./partials/head") %>
<body style="margin-left:0px;margin-right:0px">
  <div id="app">
    <div class="view view-main">
    <link href="/styles/roboto.css" rel="stylesheet">
    <!--<link href="/styles/new.css" rel="stylesheet">-->
    <link rel="stylesheet" href = "/styles/icons.css">
      <div class="page page-current">
      <div class="navbar">
        <div class="navbar-inner">
        <div class="item-content title">
          <div class="item-inner item-title">
            <div>Homework Board</div>
            <div class="item-footer" id="connection-status" style="font-size:16px">Connected</div>
          </div>
        </div>
          <a class="right" href="/popups/sort/"><i class="material-icons" style="color:#ffffff">&#xE164;</i></a>
        </div>
      </div>
        <div class="page-content" style="padding-top:0px" role="main">
          <div class="list" id="hwboard-homework-list" style="position:relative;top:60px">
            <%- renderer(data,sortType,sortOrder,adminChannels) -%>
          </div>
        </div>
        <!-- Floating App button
        Clicking will cause the edit homework popup to appear
        Only show for admins
        -->
      <% if (admin){ %>
      <div class="fab fab-right-bottom admin-only color-green-blue" aria-label="Add homework">
        <a id="fab-add-homework" href="/popups/edit/">
        <i class="f7-icons icon material-icons">&#xe145;</i>
        </a>
      </div>
      <!-- No markdown yet
      <script src="/scripts/turndown.js"></script>-->
      <% } %>
      </div>
      </div>
    </div>
    <link rel="stylesheet" href="/framework7/css/framework7.min.css">
    <script src="/scripts/jquery.min.js"></script>
    <script src="/scripts/renderer.js"></script>
    <script src="/scripts/promise-worker.js"></script>
    <script src="/scripts/sugar-date.min.js"></script>
    <script>
      //Web worker for indexedDB
      //Use promise based messaging
      const worker = new PromiseWorker(new Worker("/scripts/worker.js"))
      //Load cached data before websocket connects
      //Allows for faster loading of updated data
      worker.postMessage({
        type:"get",
      }).then(data=>{
        if(!data.length){
          //IndexedDB is empty, perhaps is first page load
          return
        }
        reRender(data)
      })
      //get cookies
      function getCookie(cname) {
        var name = cname + "=";
        var decodedCookie = decodeURIComponent(document.cookie);
        var ca = decodedCookie.split(';');
        for(var i = 0; i <ca.length; i++) {
          var c = ca[i];
          while (c.charAt(0) == ' ') {
            c = c.substring(1);
          }
          if (c.indexOf(name) == 0) {
            return c.substring(name.length, c.length);
          }
        }
        return "";
      }
    </script>

     <script src="/scripts/socket.io.js"></script>
     <!--DoNt toUcHa my eRRor rePoTer-->
     <% if(reportErrors){ %>
     <script src="/scripts/raven.min.js" crossorigin="anonymous"></script>
    <script>
      //DoNt toUcHa my eRRor rePoTer
      Raven.config('https://6c425ba741364b1abb9832da6dde3908@sentry.io/1199491').install()
      Raven.setUserContext({
        name: getCookie("name"),
        email: getCookie("email"),
      })
    </script>
    <% } %>
    <script>
    const timetable = <%-JSON.stringify(timetable) -%>;
    const conn = io(location.origin,{secure: true});
    //Handle websocket connection errors
    //Standard code for all my websocket apps
    if(!navigator.onLine){
      $("#connection-status").text(`Offline`)
    }
    conn.on("connect_error",function(e){
      if(navigator.onLine==undefined){
        //Some browsers may not support navigator.onLine
        //EDIT: appears that most browsers support but meh
        //https://caniuse.com/#feat=online-status
        <% if(reportErrors){ %>
          Raven.captureException(new Error("error checking connection status"))
        <% } %>
        $("#connection-status").text(`Error checking connection state`)
        return
      }
      if(navigator.onLine){
        //Its a server problem, perhaps websocket server not started
        $("#connection-status").text(`Error connecting to server`)
        <% if(reportErrors){ %>
          Raven.captureException(e)
        <% } %>
      }else{
        $("#connection-status").text(`Offline`)
        //Load data from cache since user is offline
      }
    })
    conn.on("disconnect",function(){
      $("#connection-status").text("Disconnected")
    })
    conn.on("connect",function(){
      $("#connection-status").text("Connected")
    })
    //request homework data from server
    //syntax conn.emit(<eventName>,[<data>],[<callback>])
    const channel = ""//location.pathname.substring(1)
    let channelSettings
    if(channel==""){
      channelSettings = {}
    }else{
      channelSettings = {
        channel,
        removeExpired:true
      }
    }
    //Db is init and user is authed
    conn.on("ready",()=>{
      conn.emit("dataReq",channelSettings,function(err,data){
      //Always check if error occurred
      if(err) throw err;
      //Put data into client-side database for caching
      worker.postMessage({
        type:"set",
        data
      })
      reRender(data)
      //Add to localstorage as a fallback
      localStorage.setItem("data",JSON.stringify(data))
    })
    })
    //Uncaught error that could not be handled via callback etc
    conn.on("uncaughtError",error=>{
      Framework7App.dialog.alert(error)
      throw new Error(error)
    })
    //Server pushes data, re-render
    conn.on("data",({channel,data:channelData})=>{
      //Add data to client side db
      updateChannelHomework(channel,channelData).then(newData=>{
        reRender(newData)
      })
    })
    </script>
<!-- non critical styles and scripts can be deferred-->
<script defer src="/scripts/dates.js"></script>
<script defer src="/scripts/generalForms.js"></script>

<script src="/framework7/js/framework7.min.js"></script>

<script src="/scripts/app.js"></script>
<% if (admin){ %>
<!-- non admins wont need these -->
<script src="/scripts/adminForms.js"></script>
<script src="/scripts/edit-homework-eventHandlers.js"></script>
<% } %>
<script defer src="/scripts/eventHandlers.js"></script>
<!-- defer when dialog code is moved -->
<script src="/fuse.js/dist/fuse.js"></script>
<%- include("./partials/adminDialogs.ejs",{adminChannels}) %>
<%- include("./partials/dialogs.ejs") %>
<script>
const mainView = Framework7App.views.create('.view-main',{
    routes:[
      {
        name:"sort",
        path: "/popups/sort/",
        url:"/routes/sort.html",
        on :{
          pageInit: _=>{
            //Uncheck all
            const radios = Array.from(document.querySelectorAll(`input[type=radio]`))
            radios.forEach(radio => radio.checked=false)
            const sortType = sortOptions.type || getCookie("sortType") || "Due date"
            let sortOrder = sortOptions.order || 0
            document.querySelector(`input[type=radio][name=type][value='${sortType}']`).checked = true
            document.querySelector(`input[type=radio][name=order][value='${sortOrder}']`).checked = true
          }
        }
      },
      {
        name:"edit-homework",
        path: "/popups/edit/",
        url:"/routes/edit-homework.html",
        on :{
          pageInit:function(e,page){
            const edit = page.route.url.includes("?edit=true")
            if(edit){
              $("#edit-title").text("Edit homework")
              startEdit()
            }else{
              $("#edit-title").text("Add homework")
            }
            initEditHomeworkEvents()
          }
        }
      },
      {
        name:"home",
        path: "/",
        url:"/"
      }
    ]
  })
</script>
<script>
  if ('serviceWorker' in navigator) {
    navigator.serviceWorker.register('/sw.js', {scope: '/'}).then
    (reg=>{
      reg.update()
      console.log('Registration succeeded. Scope is ' + reg.scope)
    }).catch(function(error) {
      console.log('Registration failed with ' + error)
    })
  }
</script>
</body>
</html>