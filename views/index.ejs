<!DOCTYPE html>
<html lang="en">
<%- include("./partials/head") %>
<link rel="stylesheet" href="/framework7/css/framework7.css">
<body style="margin-left:0px;margin-right:0px">
  <div id="app">
    <div class="view">
    <div class="navbar">
          <div class="navbar-inner">
              <div class="title">Homework Board</div>
              <div class="right" onclick="sortPopup.open()"><i class="material-icons" style="color:#ffffff">&#xE164;</i></div>
          </div>
      </div>
    <link href="/styles/roboto.css" rel="stylesheet">
    <!--<link href="/styles/new.css" rel="stylesheet">-->
    <link rel="stylesheet" href = "/styles/icons.css">
      <div class="page">
        <div class="page-content" style="padding-top:0px">
          <div class="list" id="hwboard-homework-list" style="position:relative;top:60px">
            <%- renderer(data,sortType,sortOrder) -%>
          </div>
        </div>
      <% if (admin){ %>
      <div class="fab fab-right-bottom admin-only color-green-blue" aria-label="Add homework">
        <a id="fab-add-homework">
        <i class="f7-icons icon material-icons">&#xe145;</i>
        </a>
      </div>
      <script src="/scripts/turndown.js"></script>
      <% } %>
      </div>
    </div>
    </div>
     <script src="/scripts/jquery.min.js"></script>
     <script src="/scripts/renderer.js"></script>
     <script src="/scripts/promise-worker.js"></script>
     <script src="/scripts/sugar-date.min.js"></script>
     <script>
     //Web worker for indexedDB
     const oldWorker = new Worker("/scripts/worker.js")
     //Use promise based messaging
     const worker = new PromiseWorker(oldWorker)
     </script>

     <script src="/scripts/socket.io.js"></script>
     <!--DoNt toUcHa my eRRor rePoTer-->
     <% if(reportErrors){ %>
     <script src="https://cdn.ravenjs.com/3.24.1/raven.min.js" crossorigin="anonymous"></script>
    <script>
      //DoNt toUcHa my eRRor rePoTer
      Raven.config('https://6c425ba741364b1abb9832da6dde3908@sentry.io/1199491').install()
      </script>
    <% } %>
    <script>
    const conn = io(location.origin,{transports: ['websocket'], upgrade: false, secure: true});
    //Handle websocket connection errors
    //Standard code for all my websocket apps
    conn.on("connect_error",function(e){
      console.log(Object.entries(e))
      if(navigator.onLine==undefined){
        //Some browsers may not support navigator.onLine
        //EDIT: appears that most browsers support but meh
        //https://caniuse.com/#feat=online-status
        <% if(reportErrors){ %>
          Raven.captureException(new Error("error checking connection status"))
        <% } %>
        console.log(`Error checking connection state`)
        return
      }
      if(navigator.onLine){
        //Its a server problem, perhaps websocket server not started
        console.log(`Error connecting to server`)
        <% if(reportErrors){ %>
          Raven.captureException(e)
        <% } %>
      }else{
        console.log(`Offline`)
        //Load data from cache since user is offline
      }
    })

    conn.on("connect",function(){
      console.log("Connected to server!")
    })
    //request homework data from server
    //syntax conn.emit(<eventName>,[<data>],[<callback>])
    const channel = ""//location.pathname.substring(1)
    let channelSettings
    if(channel==""){
      channelSettings = {}
    }else{
      channelSettings = {
        channel,
        removeExpired:true
      }
    }
    conn.emit("dataReq",channelSettings,function(err,data){
      //Always check if error occurred
      if(err) throw err;
      //Put data into client-side database for caching
      worker.postMessage({
        type:"set",
        data
      })
      //Add to localstorage as a fallback
      localStorage.setItem("data",JSON.stringify(data))
    })

    //Server pushes data, re-render
    conn.on("data",(data)=>{
      //Main page
      const main = location.pathname.substring(1) == ""
      //Experiments
      const experiments = location.pathname.includes("experiments")
      //Show all channels if no channel specified
      if(!(main || experiments)){
        data = data.filter(homework=>{
          return location.pathname.substring(1) == "" || homework.channel == location.pathname.substring(1)
        })
      }
      reRender(data)
      //Add data into client-side db
      worker.postMessage({
        type:"set",
        data
      })
      //Add to localstorage as a fallback
      localStorage.setItem("data",JSON.stringify(data))
    })
    </script>
    <link rel="stylesheet" href = "/styles/material-components-web.min.css">
<div class="mdc-menu" tabindex="-1" id="hw-actions">
  <ul class="mdc-menu__items mdc-list" role="menu" aria-hidden="true">
  <% if(admin) { %>
    <li class="mdc-list-item" role="menuitem" tabindex="0" onclick="startEdit()">
      Edit
    </li>
    <li class="mdc-list-item" role="menuitem" tabindex="0" onclick="startDelete()">
      Delete
    </li>
    <% } %>
    <li class="mdc-list-item" role="menuitem" tabindex="0" onclick="loadDetails()">
      Details
    </li>
  </ul>
</div>
<!-- non critical styles and scripts can be deferred-->
<script src="/scripts/material-components-web.min.js"></script>
<script defer src="/scripts/dates.js"></script>
<script defer src="/scripts/generalForms.js"></script>

<script src="/framework7/js/framework7.js"></script>

<script src="/scripts/app.js"></script>
<% if (admin){ %>
<script src="/scripts/adminForms.js"></script>
<% } %>
<script defer src="/scripts/eventHandlers.js"></script>
<!-- defer when dialog code is moved -->
<script src="../../fuse.js/dist/fuse.js"></script>
<%- include("./partials/adminDialogs.ejs",{adminChannels}) %>
<%- include("./partials/dialogs.ejs") %>
<script>
  const menuEl = document.querySelector('#hw-actions')
  const menu = new mdc.menu.MDCMenu(menuEl)
  menu.setPosition = menu.getDefaultFoundation().adapter_.setPosition
</script>
</div>
</body>
</html>